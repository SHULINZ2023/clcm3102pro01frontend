[{"/Users/shulinzhang/my-react-app/src/index.js":"1","/Users/shulinzhang/my-react-app/src/rating.js":"2","/Users/shulinzhang/my-react-app/src/App.js":"3","/Users/shulinzhang/my-react-app/src/routineList.js":"4","/Users/shulinzhang/my-react-app/src/Rating.js":"5"},{"size":321,"mtime":1700860438699,"results":"6","hashOfConfig":"7"},{"size":5026,"mtime":1701131509652,"results":"8","hashOfConfig":"7"},{"size":432,"mtime":1700861692975,"results":"9","hashOfConfig":"7"},{"size":3439,"mtime":1701139950802,"results":"10","hashOfConfig":"7"},{"size":4415,"mtime":1700860621815,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bes8q",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},"/Users/shulinzhang/my-react-app/src/index.js",[],[],"/Users/shulinzhang/my-react-app/src/rating.js",["29","30","31"],[],"/Users/shulinzhang/my-react-app/src/App.js",[],[],"/Users/shulinzhang/my-react-app/src/routineList.js",["32"],[],"/Users/shulinzhang/my-react-app/src/Rating.js",["33","34","35"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { useState,useEffect } from 'react';\nimport axios from 'axios'\nimport './mySurvey.css'\n\n\nvar avgRating = 0;\n\nfunction Rating() {\n    const createfeed= (comments,rating) =>{\n        const feed={comments: comments,\n        rating: rating\n    }\n    return feed;\n\n    };\n    const [inputValue, setInputValue] = useState('');\n    const [inputValues, setInputValues] = useState([]);\n    const [rating, setRating] = useState(0);\n\n     // Define the API URL you want to fetch data from\n\n  // Define a function to fetch and update the data\n  async function postRating(data) {\n    const apiUrl = 'http://localhost:3500/insertRating';\n  \n    try {\n      const response = await axios.post(apiUrl, data,{\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    });\n  \n      // Handle the response as needed\n      console.log('Data inserted:', response.data);\n    } catch (error) {\n      console.error('Error inserting data:', error);\n    }\n  }\n    const fetchData = async () => {\n    return fetch('http://localhost:3500/getRating')\n  .then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n \n    return response.json();\n  })\n  .then(data => {\n    const feeds = data.map(element => createfeed(element.comments,element.rating));\n    const totalRating=feeds.reduce((accumulator, feed) => accumulator + feed.rating, 0);\n    \n    avgRating = Math.round((totalRating ) / (feeds.length) * 100) / 100;\n    setInputValues(() => [...feeds]);\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });\n      \n\n  };\n\n  useEffect(() => {\n    fetchData(); // Call the fetchData function when the component mounts\n  }, []);\n\n\n    const handleStarClick = (selectedRating) => {\n        setRating(selectedRating);\n      };\n    const handleNewComments = ()=> {\n        const totalRating=inputValues.reduce((accumulator, x) => accumulator + x.rating, 0);\n        avgRating = Math.round((totalRating + rating) / (inputValues.length + 1) * 100) / 100;\n      \n        const feed = createfeed(inputValue,rating);\n        setInputValues((prevItems) => [...prevItems, feed]);\n        const data = {\n          comments: inputValue,\n          rating: rating\n        };\n        const jsonData = JSON.stringify(data);\n        postRating(jsonData);\n        setInputValue('');\n        setRating(0);\n    }  \n    const handleInputChange = (event) => {\n        setInputValue(event.target.value); // Update the state with the input value\n      };\n      const renderStars = (numStars) => {\n        const starSymbol = 'â˜…'; // Unicode star character\n        const stars = starSymbol.repeat(numStars);\n        return stars;\n      };\n      \n      const stopColor= Math.round(100*(avgRating-parseInt(avgRating)));\n      const restColor = 100-stopColor;\n      const linearGradient = \"linear-gradient(to right, red 30%, gray 70%)\"\n      const customStyle = {\n        background: `linear-gradient(to right, red ${stopColor}%, gray ${restColor}%)`,\n        WebkitBackgroundClip: 'text', // Use the camelCase for -webkit-background-clip\n           color: 'transparent', // This sets the text color to transparent\n      };\n  \n    return (\n      <div>\n        {inputValues.map((x, index) => (\n          <h1 key={index}><span className='star selected'>{renderStars(x.rating)}</span>{x.comments}</h1>\n        ))}\n   \n\n        <form onSubmit={handleNewComments}>\n            <label>Enter your comments:<br/>\n            <textarea cols='40' rows='2'\n            onChange={handleInputChange} value={inputValue}\n            />\n            </label>\n        </form>\n        <p>Rate this product:\n        <span className='star selected'>{renderStars(parseInt(avgRating))}</span><span key={stopColor} style={customStyle}>&#9733;</span><span className='star'>{renderStars(5 - parseInt(avgRating) -1)}</span><span>{avgRating}</span></p>\n        <div className=\"star-rating\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <span\n            key={star}\n            className={star <= rating ? 'star selected' : 'star'}\n            onClick={() => handleStarClick(star)}\n          >\n            &#9733; {/* Unicode star character */}\n          </span>\n        ))}\n      </div>\n        <button\n          type=\"button\"\n          onClick={handleNewComments}\n        >Submit</button>\n      </div>\n    );\n  }\n\n  export default Rating;\n",["36"],{"ruleId":"37","severity":1,"message":"38","line":2,"column":8,"nodeType":"39","messageId":"40","endLine":2,"endColumn":16},{"ruleId":"41","severity":1,"message":"42","line":77,"column":6,"nodeType":"43","endLine":77,"endColumn":8,"suggestions":"44"},{"ruleId":"37","severity":1,"message":"45","line":112,"column":13,"nodeType":"39","messageId":"40","endLine":112,"endColumn":27},{"ruleId":"37","severity":1,"message":"45","line":57,"column":13,"nodeType":"39","messageId":"40","endLine":57,"endColumn":27},{"ruleId":"37","severity":1,"message":"38","line":2,"column":8,"nodeType":"39","messageId":"40","endLine":2,"endColumn":16},{"ruleId":"41","severity":1,"message":"46","line":66,"column":6,"nodeType":"43","endLine":66,"endColumn":8,"suggestions":"47"},{"ruleId":"37","severity":1,"message":"45","line":98,"column":13,"nodeType":"39","messageId":"40","endLine":98,"endColumn":27},{"ruleId":"48","replacedBy":"49"},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchData' and 'location'. Either include them or remove the dependency array.","ArrayExpression",["50"],"'linearGradient' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["51"],"no-new-object",["52"],{"desc":"53","fix":"54"},{"desc":"55","fix":"56"},"no-object-constructor","Update the dependencies array to be: [fetchData, location]",{"range":"57","text":"58"},"Update the dependencies array to be: [fetchData]",{"range":"59","text":"60"},[2211,2213],"[fetchData, location]",[1748,1750],"[fetchData]"]